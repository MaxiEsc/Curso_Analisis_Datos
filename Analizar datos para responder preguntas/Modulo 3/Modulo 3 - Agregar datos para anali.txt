Modulo 3 - Agregar datos para analisis

Video: Agregar datos para analisis 


exploraremos algo que se llama agregación de datos... 

Agregación significa recolectar o juntar muchas partes separadas en un todo. 

Por ejemplo, la Vía Láctea es una agregación de estrellas, polvo y gases. Y... 

La agregación de datos es el proceso de recolectar datos de múltiples fuentes para combinarlos en una sola colección resumida. 


En el análisis computacional de datos, una colección resumida, o resumen, es identificar los datos que necesitas y reunirlos todos en un lugar. Por ejemplo, digamos que tienes un armario lleno de rompecabezas. Un día, una repisa se rompe y todas las cajas se caen, desperdigando las piezas de los rompecabezas por todos lados. Para volver a organizar cada rompecabezas, necesitas identificar las piezas que corresponden a cada rompecabezas, juntarlas y volverlas a poner en las cajas correctas. Solo entonces puedes trabajar con esas piezas y crear una imagen completa. Por eso es que en el análisis de datos, las piezas del rompecabezas representan los datos contenidos en conjuntos de datos diferentes. Organizarlos es el proceso de agregación. Luego las pilas de piezas que completan un solo rompecabezas se convierten en tu resumen. Y, por último, volver a juntar esas piezas es como analizarlas para sacar conclusiones importantes. La agregación de datos ayuda a los analistas de datos a identificar tendencias, hacer comparaciones y sacar conclusiones que no serían posibles analizando cada uno de los elementos de los datos por separado. Por ejemplo, los datos sobre graduaciones de secundaria para estudiantes individuales se pueden agregar a una sola tasa de graduación para toda una clase. Los datos también se pueden agregar en un período determinado para brindar estadísticas, como promedios, mínimos, máximos y sumas. Por ejemplo, esos mismos datos de tasa anual de graduación pueden volver a agregarse en un resumen que nos muestre las tasas de graduación por distrito, estado y país. Aquí tienes otro ejemplo. Digamos que tienes datos sobre ventas inmobiliarias anuales en un vecindario puntual durante los últimos 10 años. Si agregaras todos esos datos, podrías descubrir el precio promedio de una casa en esa zona y cómo los valores aumentaron o disminuyeron con el tiempo. Las funciones ayudan mucho a posibilitar la agregación de datos. Pronto aprenderás a usar algunas de las más comunes para crear resúmenes. Además, hablaremos sobre agregar datos usando algo que se llama subconsulta. Ya has visto el SQL en acción y comprendes que una consulta es una solicitud de información proveniente de una base de datos. Por lo tanto... 

Una subconsulta, también llamada consulta interna o anidada, es una consulta dentro de otra consulta. 

Después de los próximos vídeos, sabrás cómo agregar datos y comprenderás las herramientas que usarás en el camino.
_______________________________________________________________________________________
Piezas de rompecabezas = Datos
Organizacion = Agregacion
Pila de piezas = Resumen 
Juntar las piezas = Conclusiones importantes

_____________________

Los datos tambien pueden ser agragados en un periodo determinado para brindar estadisticas:
-Promedio
-Minimos
-Maximos 
-Sumas


<----------------------------------------------------------------------------------------------------------------------->

Video: Preparar para VLOOKUP

prepararemos nuestros datos para VLOOKUP, una herramienta de agregación de datos. Como ya aprendiste, la agregación de datos es el proceso de recolectar datos de múltiples fuentes para combinarlos en una sola colección resumida. La agregación de datos puede darte todo tipo de información sobre los datos que estás mirando. Por ejemplo, en marketing, puedes agregar datos de una campaña publicitaria para ver cómo le fue a lo largo del tiempo y con clientes particulares. Las agencias de viajes usan agregación de datos para averiguar cuánto cobran sus competidores por un determinado vuelo, habitación de hotel o tipo de auto de alquiler. Luego, pueden asegurarse de ponerle un precio lo más competitivo posible a sus propios productos. Una cosa que todas estas empresas tienen en común es que pueden usar VLOOKUP para ayudarles a alcanzar estos objetivos. A modo de recordatorio... 

VLOOKUP quiere decir búsqueda vertical. Básicamente es una función que busca un determinado valor en una columna para devolver la información correspondiente. 

Previamente, usamos VLOOKUP para tomar el valor de una celda y buscar una coincidencia en otra. Pudimos hacer coincidir un código de producto con números y letras que había en una hoja de cálculo con el nombre real del producto que estaba en otra hoja. Pero antes de que pueda hacerse todo eso, necesitamos asegurarnos de que nuestros datos estén bien preparados. Como escuchaste muchas veces, los datos limpios tienen muchas más probabilidades de darte resultados precisos. Empecemos con la primera tarea común de limpieza de datos: los diferentes tipos de datos. Por ejemplo, las fechas de un conjunto de datos podrían formatearse como números o los números podrían representarse como cadenas de texto en vez de valores numéricos. Cuando los datos no están en un formato uniforme o en un formato que la aplicación de hoja de cálculo reconoce, VLOOKUP no sabrá qué hacer con esos datos, y dará error. Anteriormente, aprendiste cómo convertir números a fechas usando la herramienta de Formato. Ahora, enfoquémonos en convertir texto a valores numéricos. Para hacerlo, podrías usar el menú de Formato para seleccionar un tipo de número, pero también podrías usar la función VALUE... 

VALUE es una función que convierte una cadena de texto que representa un número en un valor numérico. 

Aquí hay un ejemplo. En esta hoja de cálculo, los números en la columna A actualmente son cadenas de texto. Podemos confirmarlo ejecutando una función simple de SUM. La sintaxis es signo igual SUM, abre paréntesis, y luego los ítems que quieres sumar. Aquí, es de la A2 a la A4. Los dos puntos dicen que incluimos todo entre estas dos referencias. Ahora puedes agregar un paréntesis de cierre y presionar Enter o puedes hacer clic y arrastrar las celdas que quieres dentro del paréntesis para ahorrar un poco de tiempo. El resultado es cero. Eso es porque la función no funciona en cadenas de texto. Pero si aplicamos la función VALUE, convierte automáticamente ese texto en un valor numérico. Para hacerlo, escribiremos signo igual VALUE, luego un paréntesis abierto. Dentro, hacemos referencia a la celda cuyo valor queremos convertir, en este caso A2. Ahora, si cerramos el paréntesis y presionamos Enter, verás que el 1, 2, 3 es numérico. Si lo arrastramos por la columna, el 4, 5, 6 y 7, 8, 9 también se hacen numéricos. Ahora podemos ponerlo a prueba ejecutando otra función SUM. Escribiremos signo igual SUM y un paréntesis abierto, luego B2, dos puntos y B4. B2, B3 y B4 están incluidos en la suma. Cierra el paréntesis y presiona Enter. Ahora muestra que el total es 1,368. El siguiente error común se origina en tener espacios adicionales en tu hoja de cálculo. Como aprendiste, cuando los datos se copian de una fuente a la otra, a veces se acoplan algunos espacios al principio o al final. Estos espacios pueden causar problemas al usar VLOOKUP. Debemos asegurarnos de usar TRIM durante el proceso de limpieza de datos. 
-TRIM borra automáticamente cualquier espacio adicional agregado a la celda. 
Otro error típico en VLOOKUP, que se puede detectar fácilmente en la limpieza de datos, son los duplicados. Si existen filas duplicadas en la búsqueda, devolverá solo la primera coincidencia que encuentre. Como ya aprendiste... 
-Quitar duplicados es una herramienta que automáticamente busca y elimina entradas duplicadas de una hoja de cálculo. 
El uso de Quitar duplicados, como viste en un vídeo hace un rato, es una manera excelente de eliminar duplicados y ayudar a asegurarte de encontrar el registro correcto durante la búsqueda. Siempre es bueno recordar que los datos limpios son la base sobre la que se construye todo lo demás. VLOOKUP puede ser una herramienta muy útil para limpiar datos. En el siguiente vídeo, seguiremos explorando más maneras en que puedes usar VLOOKUP.
__________________________________________________
Un analista de datos aplica la función VALUE a una cadena de texto que representa un número, pero está formateada como texto. ¿Qué hace la función VALUE a esa cadena de texto?
La función VALUE convierte la cadena de texto en un valor numérico.

<----------------------------------------------------------------------------------------------------------------------->

Video: VLOOKUP en accion

hablamos de VLOOKUP para limpieza de datos. También analizamos la importancia de preparar nuestra hoja de cálculo antes de usar VLOOKUP. Ahora vamos a verla en acción. A modo de recordatorio... 

VLOOKUP es una función de hoja de cálculo que busca verticalmente un valor determinado en una columna para devolver la información correspondiente. 

Empecemos con la sintaxis de VLOOKUP. En este ejemplo, 103 es un valor a buscar. A2:B26 es el rango en que se buscará. Quizás recuerdes que VLOOKUP no reconoce nombres de columna como A, B, o C. Usamos un número para indicar la columna. Por último, FALSE le indica a VLOOKUP que encuentre una coincidencia exacta. Si esto dijera <i>true</i>, la función devolvería solo una coincidencia cercana, que podría no ser lo que queremos. Ahora usemos VLOOKUP. Una de las cosas más comunes que hacen los analistas de datos con VLOOKUP es rellenar datos en una hoja de cálculo proveniente de otra. Aquí hay un ejemplo. Digamos que trabajamos con datos que están en dos hojas de cálculo diferentes, pero necesitamos información de ambas para responder a nuestra pregunta de negocios. VLOOKUP puede conectar dos hojas entre sí en una columna coincidente para rellenar una sola hoja. Vamos a analizarlo. En esta hoja de cálculo, tenemos números de ID de empleados y sus tarifas. En esta hoja de cálculo, tenemos los mismos números de ID de empleados y cuántas horas trabajó cada persona. Podemos usar VLOOKUP para buscar su tarifa en la hoja de cálculo de tarifas de empleados y agregarla a la hoja de cálculo de horas de los empleados. La fórmula es signo de igual VLOOKUP abro paréntesis, después A2, que es el primer número de ID de empleado y la hoja de cálculo de horas de los empleados. Luego agregamos una coma y el nombre de la hoja de cálculo en la que queremos buscar: tarifas de los empleados. Asegúrate de colocar comillas simples alrededor del nombre de la hoja de cálculo y agregar un signo de exclamación después del nombre. Esta es la manera de hacer referencia a la otra hoja de cálculo. Ahora, añadimos el rango, que es de A2 a B5. Como viste en un vídeo anterior, también podemos optar por agregar signos de dólar para bloquear el rango con referencias a celdas absolutas. Esto evita que cambien al copiar la fórmula a otras celdas. Agrega otra coma, luego un dos. El dos indica que queremos buscar una coincidencia en la segunda columna, la columna B, para la tarifa. Por último, una coma más y agregamos <i>false</i> para buscar una coincidencia exacta. Arrastra la fórmula hacia abajo en la columna y ahora podemos usar una fórmula de multiplicación simple para calcular el sueldo de cada persona multiplicando las horas trabajadas por nuestra columna recién creada de tarifa. ¡Excelente trabajo! En una próxima lectura, aprenderás aún más sobre VLOOKUP y accederás a recordatorios y recursos útiles sobre VLOOKUP. VLOOKUP es una de las funciones más complicadas.
_____________________________________________________
Si ingresas FALSE como el último parámetro de entrada en una función VLOOKUP, VLOOKUP buscará una coincidencia exacta. 

<----------------------------------------------------------------------------------------------------------------------->

Video: Identificacion de errores comunes en VLOOKUP

La resolución de problemas se refiere a hacer la preguntas correctas, y en esto nos centraremos en el este vídeo. Aprenderemos a usar la resolución de problemas para resolver todo tipo de problemas. Para hacerlo, necesitaremos hablar de algunas de las limitaciones de VLOOKUP y luego practicar cómo resolver los problemas más comunes que enfrentan los analistas de datos. Algunas de las preguntas de resolución de problemas que me gusta hacerme: ¿Cómo debería priorizar estos temas? Intentar resolver muchos problemas juntos puede ser algo abrumador. Siento que es útil abordar de a un tema a la vez Luego pregunto: En una sola oración, ¿qué problema enfrento? Esto ayuda a aclarar qué es lo que pasa realmente, entonces no me enredo con detalles adicionales. A fin de cuentas, si no tienes una meta clara antes de analizar los datos, puedes encontrar cualquier cosa. Siempre es mejor empezar entendiendo bien la situación uno mismo. Luego dejar que los datos te indiquen si estás o no en el camino correcto. La siguiente pregunta que me hago es, ¿Qué recursos me pueden ayudar a resolver el problema? Internet es uno de los mejores recursos que existen. Si tienes una pregunta, probablemente miles de otras personas se toparon con lo mismo. Por eso, puede ser muy útil hacer una búsqueda rápida. Y es bueno recordar que las personas también son recursos. No tengas miedo a hacer preguntas. No solo es una gran manera de aprender, sino que también puede ayudarte a desarrollar grandes relaciones con tus colegas. Y una pregunta final importante que me hago: ¿Cómo puedo evitar que este problema se produzca en el futuro? Si un nuevo procedimiento o directriz puede evitar que vuelva a surgir el mismo problema, eso ahorra mucho tiempo. Muy bien. Comencemos observando que VLOOKUP solo devuelve la primera coincidencia que encuentra, aun si existen muchas coincidencias posibles. Otra cosa a tener en cuenta es que VLOOKUP solo puede devolver un valor de los datos a la derecha. No puede ver lo de la izquierda. Buenas noticias. Existe una solución simple. Los analistas de datos generalmente resuelven el problema copiando y pegando una columna a la izquierda de los datos que quieren analizar. De esa manera, el valor de búsqueda está en la columna más a la izquierda y los datos que quieren están a la derecha. Este es otro problema que veo mucho. Digamos que las primeras filas de una VLOOKUP devolvieron el resultado correcto. Pero cuando vas bajando la función por la columna, empiezan a surgir problemas. Esto probablemente se deba a que la parte de matriz de tabla de la función no se ha bloqueado o hecho absoluta. 

Una referencia absoluta es una referencia que está bloqueada para que las filas y columnas no cambien al copiarse. 
Puedes resolver este problema encapsulando la matriz de tabla en signos de dolar. 

Como aprendiste antes, el signo de dólar controla cómo se actualizará la referencia. Garantiza que la parte correspondiente de la referencia no cambie. Otra cosa que puede afectar tus resultados VLOOKUP son los problemas de control de versión. Es decir, una función al principio funcionaba perfectamente, pero después algo cambió en la hoja de cálculo a la que hacía referencia. Por ejemplo, quizás un usuario insertó una columna. Entonces ahora las columnas en tu función ya no dirigen a VLOOKUP al lugar correcto. Cuando sucede algo así, devolverá un valor incorrecto. Existen algunas cosas que los analistas de datos pueden hacer para asegurarse de que esto no suceda. 

-> Primero, bloquear la hoja de cálculo. Esto evita que otras personas hagan cambios. Para hacerlo en Sheets, selecciona Datos, luego Hojas protegidas y rangos. En otras aplicaciones de hojas de cálculo, existen herramientas que hacen lo mismo. Luego, elige qué quieres proteger. En este caso, queremos proteger toda la hoja. Luego puedes fijar permisos para mostrar una advertencia o restringir quién puede editar. Elige que solo tú, y después Aceptar. Pero ten en cuenta que habrá veces en que otras personas necesiten trabajar en la hoja de cálculo, entonces bloquearlos podría traerte problemas con tus colegas. En ese caso, puedes usar... 

MATCH, que es una función usada para ubicar la posición de un valor de búsqueda específico y puede ayudarte con el control de versiones. 

Ahora no entraremos en ese tema, pero solo quiero que sepas que esa es una opción, en caso de que alguna vez la necesites. El problema final que abordaremos tiene que ver con las coincidencias exactas y aproximadas. Al usar VLOOKUP, probablemente obtengas diferentes resultados, dependiendo de si escribes la palabra TRUE o FALSE dentro de tu función. 

TRUE le indica a VLOOKUP que busque coincidencias aproximadas, y FALSE le indica a VLOOKUP que busque coincidencias exactas. 

Entonces si una función luce así, le dice a VLOOKUP que busque la coincidencia más cercana al texto o número que buscamos. Es importante saber que VLOOKUP comienza en la parte superior de un rango especificado y busca hacia abajo verticalmente en cada celda para encontrar el valor correcto. Deja de buscar cuando encuentra cualquier valor superior o igual al valor de búsqueda. Es por eso que los analistas de datos generalmente usan FALSE, así. De esa manera, VLOOKUP solo devuelve la coincidencia exacta con lo que escribiste en el valor de búsqueda. VLOOKUP es una de las funciones de búsqueda y referencia más populares en las hojas de cálculo. También es una de las más complicadas. A continuación, aprenderás sobre otros de estos desafíos comunes. Todo lo que aprenderás te ayudará a tener menos problemas cuando comiences a usar VLOOKUP como futuro analista de datos.
_______________________________________________________________

Preguntas para encarar Errores comunes:

Como deberia encarar esos errores?
En unica oracion... Que error estoy encarando?
Que recursos pueden ayudarme a resolver el problema?
Como puedo resolver este problema que ocurra en el futuro?
______

VLOOKUP tiene ciertas limitaciones. Una limitación es que solo devuelve la primera coincidencia que encuentra dentro del rango especificado. Otra limitación es que VLOOKUP solo puede buscar dentro de la primera columna en una hoja de cálculo.
Afirmacion incorrecta 
VLOOKUP solo devuelve la primera coincidencia que encuentra dentro de un rango especificado y solo puede buscar en columnas a la derecha.
___
En la función =VLOOKUP(K2,'Sheet 4'!A:B,2,TRUE), ¿qué indica la palabra TRUE?
Afirmacion correcta
En la función =VLOOKUP(K2,'Sheet 4'!A:B,2,TRUE), TRUE le indica a VLOOKUP que busque coincidencias aproximadas.

<----------------------------------------------------------------------------------------------------------------------->

Conceptos centrales de VLOOKUP

Las funciones pueden usarse para encontrar información rápidamente y realizar cálculos usando valores específicos. En esta lectura, aprenderás la importancia de una de estas funciones, VLOOKUP, o Vertical Lookup (búsqueda vertical), que busca un valor determinado en una columna de hoja de cálculo y devuelve una información específica de la fila en la que se encuentra el valor buscado.

¿Cuándo hace falta usar VLOOKUP? 

Dos razones comunes para usar VLOOKUP son:

    Rellenar datos en una hoja de cálculo

    Combinar datos de una hoja de cálculo con datos de otra

Sintaxis de VLOOKUP

La función de VLOOKUP está disponible tanto en Microsoft Excel como en Google Sheets. Se te presentará la sintaxis general en Google Sheets. (Puedes consultar los recursos al final de esta lectura para obtener más información acerca de VLOOKUP en Microsoft Excel).

Sintaxis en EXCEL

VLOOKUP(search_key,range,index[is_sorted])

search_key

    El valor a buscar.
    Por ejemplo, 42, "Gatos", o I24.

range

    El rango a tener en cuenta para la búsqueda
    La primera columna en el rango se busca para ubicar datos que coincidan con el valor especificado por search_key.

index

    El índice de columna del valor a devolver, en que la primera columna en el rango se numera 1.
    Si el índice no está entre 1 y el número de las columnas dentro del rango, se devuelve #VALUE!.

is_sorted

    Indica si la columna a buscar (la primera columna del rango especificado) está ordenada. TRUE como valor predeterminado.
    Se recomienda configurar is_sorted en FALSE. Si está configurada en FALSE, se devuelve una coincidencia exacta. Si existen múltiples valores coincidentes, se devuelve el contenido de la celda que corresponde al primer valor encontrado y si no se encuentra un valor coincidente, se devuelve #N/A.

    Si is_sorted es TRUE o se omite, se devuelve la coincidencia más cercana (menor o igual a la clave de búsqueda). Si todos los valores en la columna de búsqueda son mayores a la clave de búsqueda, se devuelve #N/A.

¿Qué pasa si aparece #N/A?

Como acabas de leer, #N/A indica que no se puede devolver un valor coincidente como resultado de VLOOKUP. El error no significa que haya algo que esté realmente mal con los datos, pero las personas pueden tener preguntas si ven el error en un informe. Puedes usar la función IFNA para reemplazar el error #N/A con algo más descriptivo, como “Does not exist” (no existe).

IFNA(value,value_if_na)

value

    Este es un valor requerido.

    La función verifica si el valor de la celda coincide con el valor, como #N/A.

value_if_na

    Este es un valor requerido.

    La función devuelve este valor si el valor de la celda coincide con el valor en el primer argumento; devuelve este valor cuando el valor de la celda es #N/A.

Recordatorios útiles de VLOOKUP

    TRUE significa una coincidencia aproximada, FALSE significa una coincidencia exacta en la clave de búsqueda. Si los datos usados para la clave de búsqueda están ordenados, se puede usar TRUE.

    Lo deseable es que la columna que coincide con la clave de búsqueda en una fórmula de VLOOKUP esté en el lado izquierdo de los datos. VLOOKUP solo observa datos a la derecha después de que se encuentra una coincidencia. En otras palabras, el índice para VLOOKUP indica columnas a la derecha únicamente. Esto puede requerir que muevas las columnas de lugar antes de usar VLOOKUP.

    Después de haber rellenado datos con la fórmula VLOOKUP, puedes copiar y pegar los datos como valores solamente para quitar las fórmulas para que puedas volver a manipular los datos. 

Recursos de VLOOKUP para Microsoft Excel

VLOOKUP puede diferir levemente en Microsoft Excel, pero generalmente los conceptos generales pueden aplicarse de todos modos. Consulta los siguientes recursos si trabajas con Excel.

    Cómo usar VLOOKUP en Excel

: Este tutorial incluye un vídeo para ayudarte a lograr una comprensión general de cómo opera la función VLOOKUP en Excel, así como ejemplos prácticos para analizar.

Tutorial de VLOOKUP en Excel

: Sigue esta lección en vídeo y aprende cómo escribir una fórmula VLOOKUP en Excel y domina consejos y trucos útiles para ahorrar tiempo.

23 cosas que deberías saber sobre VLOOKUP en Excel

: Explora esta lista de 23 hechos de VLOOKUP así como desafíos que podrías tener y comienza a aprender cómo controlarlos.

Cómo usar la función VLOOKUP de Excel

    : Este artículo comparte un ejemplo específico sobre cómo aplicar VLOOKUP en tus búsquedas.

VLOOKUP en Excel versus Google Sheets

: Esta guía ofrece una comparación de VLOOKUP en Excel y Google Sheets. 



<----------------------------------------------------------------------------------------------------------------------->

Video: Comprender JOIN 

hablaremos acerca de cómo usar JOIN en SQL para agregar datos en bases de datos. Primero, te contaré un poco sobre qué es una JOIN, y luego exploraremos algunos de las JOIN más comunes en acción.  

JOIN es una cláusula SQL que se usa para combinar filas de dos o más tablas basadas en una columna relacionada. Básicamente, una JOIN puede entenderse como la versión SQL de VLOOKUP que acabamos de analizar. 

Existen cuatro JOIN comunes que usan los analistas de datos: inner, left, right y outer. Esta es una visualización útil de lo que hace en realidad cada JOIN. Los usaremos para ayudarnos a comprender estas funciones. Las JOIN te ayudan a combinar columnas coincidentes o relacionadas de diferentes tablas. Cuando aprendimos sobre bases de datos relacionales, nos referimos a estos valores como claves primarias y externas. Las claves primarias hacen referencia a columnas en las que cada valor es único a esa tabla. Pero esa tabla puede tener muchas claves externas que son claves primarias en otras tablas. Por ejemplo, en una tabla sobre empleados, la ID de empleado es una clave primaria y la ID de la oficina es una clave externa. Las JOIN usan estas claves para identificar relaciones y valores correspondientes. 

Una inner JOIN es una función que devuelve registros con valores coincidentes en ambas tablas. 

Si pensamos en las tablas como círculos de este diagrama de Venn, una inner JOIN devolvería los registros que existen donde se superponen las tablas. Para que los registros aparezcan en la tabla de resultados, tienen que ser valores clave en ambas tablas. Los registros solo se fusionarán si son coincidencias en ambas tablas. Cuando ingresamos JOIN en SQL, generalmente toma inner JOIN como predeterminado. Muchos analistas usan JOIN como abreviatura en vez de escribir toda la consulta.... 

LEFT JOIN es una función que devuelve todos los registros de la tabla izquierda y solo los registros coincidentes de la tabla derecha. 

Así puedes darte cuenta de qué tabla es izquierda o derecha. En inglés y en SQL leemos de izquierda a derecha. La tabla mencionada primero es izquierda y la tabla mencionada segundo es derecha. También puedes pensar en izquierda como un nombre de tabla a la izquierda de la instrucción JOIN y en derecha como un nombre de tabla a la derecha de la instrucción JOIN. En este diagrama, verás que toda la tabla izquierda está coloreada, y esa es la superposición con la tabla derecha, que nos muestra que la tabla izquierda y los registros que comparte con la derecha están siendo seleccionados. Cada fila en la tabla izquierda aparece en los resultados aun si no hay coincidencias en la tabla derecha. 

RIGHT JOIN hace lo opuesto. Osea es una función que devuelve todos los registros de la tabla derecha y solo los registros coincidentes de la tabla izquierda.  

Devuelve todos los registros de la tabla derecha y solo los registros coincidentes de la izquierda. Puedes obtener los mismos resultados si inviertes el orden de las tablas y usas una LEFT JOIN. Por ejemplo, SELECT from table A, LEFT JOIN table B es lo mismo que SELECT from table B, RIGHT JOIN table A. Por último, está OUTER JOIN... 

OUTER JOIN combina RIGHT y LEFT JOIN para devolver todos los registros coincidentes en ambas tablas. 

Esto significa que devolverá todos los registros en ambas tablas. Si hay registros en una tabla sin coincidencias, creará un registro sin valores para la otra tabla. El uso de las JOIN puede facilitar mucho el trabajo con múltiples fuentes de datos y puede hacer que las relaciones entre las tablas sean más claras. Aquí hay un ejemplo. Digamos que trabajamos con datos de empleados de múltiples departamentos. Tenemos una tabla de empleados y una tabla de departamentos, y ambas tienen algunas columnas como ID de departamento. Podemos usar diferentes cláusulas JOIN para ayudarnos a colocar diferentes datos de nuestras tablas y agregarlos. Quizás queremos obtener una lista de empleados con su nombre de departamento, excluyendo a empleados sin ID de departamento. Dado que el registro de ID de departamento se usa en ambas tablas, podemos usar una INNER JOIN para que devuelva una lista únicamente con esos empleados. A modo de recordatorio, los analistas a veces solo ingresan JOIN para una INNER JOIN, pero para este ejemplo, lo escribiremos completo. Para armar esta consulta, comenzaremos con SELECT y AS para decirle a SQL cómo queremos que se titulen las columnas. Luego usaremos FROM para decirle de dónde obtenemos estos datos, en este caso, la tabla de empleados. Luego ingresaremos INNER JOIN y la otra tabla que usamos, que es departamentos. Podemos especificar qué columna y cada tabla contendrá la clave JOIN coincidente escribiendo ON employees.department_id equals departments.departments_id. Ahora, ejecutémoslo. Ahora tenemos una lista de nombres de empleados e ID de departamento para los empleados que tienen esas ID. Pero podríamos usar LEFT o RIGHT join para obtener una lista de todos los nombres de empleados y sus departamentos cuando estén disponibles. Probemos ambas opciones rápidamente. Esto comenzará de manera similar a la última consulta, escribiremos SELECT AS y FROM nuevamente. Pero esta vez escribiremos LEFT JOIN y usaremos ON como hicimos en la última consulta. Cuando ejecutamos la consulta, volvemos a esta nueva lista con los nombres de empleados y departamentos. Pero notarás que hay valores nulos. Estos son los lugares en los que la tabla derecha, que es departamentos en este caso, no tenía valores correspondientes. Probemos RIGHT JOIN solo a modo de ensayo. Esta consulta será casi igual. La única diferencia es que usaremos la cláusula RIGHT JOIN para devolver todas las filas de la tabla derecha, ya sea que tengan valores coincidentes en una tabla a la izquierda de la instrucción JOIN o no. En este caso, la tabla derecha es departamentos. Ahora probemos una última JOIN: OUTER. OUTER JOIN recuperará todos los nombres de empleados y departamentos. Nuevamente, esta consulta comenzará de manera muy similar a las otras que hicimos, usaremos SELECT AS y FROM para elegir qué datos queremos y cómo. Captaremos esto de la tabla de empleados y colocaremos FULL OUTER JOIN en la tabla de departamentos para obtener todos los registros de ambas. También volveremos a usar ON aquí. Ahora podemos ejecutarlo, y obtenemos todos los nombres de los empleados y los departamentos de estas tablas. Habrá valores nulos en las columnas nombre de departamento, nombre de empleado y puesto porque unimos columnas que no tienen valores coincidentes. Ahora ya sabes cómo funcionan las JOIN. Las JOIN son súper útiles cuando necesitas trabajar con datos de múltiples tablas relacionadas. Te dan mucha flexibilidad en cuanto a cómo combinar y visualizar esos datos. Si alguna vez tienes problemas para recordar qué hacen INNER, RIGHT, LEFT o OUTER JOIN, piensa en nuestro diagrama de Venn. Seguiremos aprendiendo sobre agregación de datos en SQL la próxima. Nos vemos pronto.
_______________
Un analista de datos quiere combinar filas de cuatro tablas en una base de datos. ¿Qué cláusula SQL combina dos o más tablas basadas en una columna relacionada?
JOIN es una cláusula SQL que combina filas de dos o más tablas basadas en una columna relacionada. Hay disponibles variaciones INNER JOIN, OUTER JOIN, LEFT JOIN y RIGHT JOIN. Si se usa JOIN, se supone que es un INNER JOIN.
______________
Un analista de datos trabaja con dos tablas en una base de datos. ¿Qué cláusula JOIN le permite combinar funcionalidad RIGHT y LEFT JOIN para devolver registros coincidentes de cualquiera de las tablas?
La cláusula OUTER JOIN permite combinar funcionalidad RIGHT y LEFT JOIN para devolver registros coincidentes de cualquiera de las tablas.

<----------------------------------------------------------------------------------------------------------------------->

Identidades secretas: La importancia de los alias

En esta lectura, aprenderás a usar alias para simplificar tus consultas SQL. Los alias se usan en consultas SQL para crear nombres temporarios para una columna o tabla. Los alias hacen que te sea mucho más simple hacer referencia a tablas y columnas en tus consultas SQL cuando tienes nombres de tabla o columna que son demasiado largos o complejos para usar en consultas. Imagina un nombre de tabla como special_projects_customer_negotiation_mileages. Sería muy difícil tener que volver a escribirlo cada vez que usas esa tabla. Con un alias, puedes crear un apodo significativo que puedes usar para tu análisis. En este caso, “special_projects_customer_negotiation_mileages” puede recibir el alias de “mileage”. En vez de tener que escribir el nombre largo de la tabla, puedes usar un apodo significativo que decidas. 
Sintaxis básica para asignar alias

La asignación de alias es el proceso de usar alias. En las consultas SQL, los alias se implementan usando el comando AS. La sintaxis básica del comando AS puede verse en la siguiente consulta para asignar un alias a una tabla

Sintaxis alternativa para alias

Si el uso de AS provoca un error al ejecutar una consulta porque la base de datos SQL con la que trabajas no es compatible, puedes omitirlo. En los ejemplos anteriores, la sintaxis alternativa para asignar un alias a una tabla o columna sería:

    FROM table_name alias_name

    SELECT column_name alias_name

La conclusión clave es que las consultas pueden ejecutarse con o sin AS para asignar alias, pero el uso de AS tiene el beneficio de hacer que las consultas sean más legibles. Ayuda a que los alias se destaquen con mayor claridad.
Alias en acción

Veamos un ejemplo de una consulta SQL que usa alias. Digamos que trabajas con dos tablas: una tiene datos de empleados y la otra tiene datos de departamentos. La instrucción FROM para asignar alias a esas tablas podría ser:

FROM personas.alumnos AS estudiantes 

Estos alias igualmente te informan exactamente qué hay en estas tablas, pero ahora no tienes que ingresar manualmente esos nombres largos de tabla. Los alias pueden ser muy útiles para consultas largas y complicadas. Es más fácil leer y escribir tus consultas cuando tienes alias que te dicen qué está incluido dentro de tus tablas.
Para obtener más información

Si te interesa aprender más sobre alias, estos son algunos recursos para ayudarte a comenzar: 

    Alias SQL

: Este tutorial sobre asignación de alias es un recurso muy útil cuando comienzas a practicar por tu cuenta la escritura de consultas y la asignación de alias a tablas. Además, demuestra cómo funciona la asignación de alias con tablas reales. 

Alias en SQL

    : Esta introducción detallada a la asignación de alias incluye múltiples ejemplos. Este es otro gran recurso de consulta si necesitas más ejemplos. 

    Uso de alias para columnas

    : Esta es una guía que se enfoca específicamente en alias de columnas. Generalmente, asignarás alias a tablas enteras, pero si necesitas asignar un alias solo a una columna, este es un gran recurso para tener en cuenta. 

<----------------------------------------------------------------------------------------------------------------------->

Uso efectivo de JOIN

En esta lectura, repasarás cómo se usan las JOIN y habrá una introducción de algunos recursos que puedes usar para aprender más acerca de ellas. Una JOIN combina tablas usando una clave primaria o externa para alinear la información proveniente de ambas tablas en el proceso de combinación. Las JOIN usan estas claves para identificar relaciones y valores correspondientes entre tablas. 

Si necesitas un repaso de claves primarias y externas, consulta el glosario
 para este curso o vuelve a las Bases de datos en análisis computacional de datos

.
La sintaxis general de JOIN

SELECT 
	nombre_tabla.columna,
	nombre_tabla.columna,
	...
FROM
	nombre_tabla_1
JOIN
	nombre_tabla_2
ON	
	nombre_tabla_1.columna = nombre_tabla_2.columna 

Como puedes ver en la sintaxis, la instrucción JOIN forma parte de la cláusula FROM de la consulta. JOIN en SQL indica que vas a combinar datos de dos tablas. ON en SQL identifica cómo se deben asociar las tablas para que se combine la información correcta de ambas. 
Tipos de JOIN

Existen cuatro maneras generales de usar JOIN en consultas SQL: INNER, LEFT, RIGHT y FULL OUTER.

Esto es lo que hacen estas diferentes consultas JOIN.

INNER JOIN

INNER es opcional en esta consulta SQL porque es la opción predeterminada, así como la operación de JOIN más usada. Puedes verlo como JOIN a secas. INNER JOIN devuelve registros si los datos están dentro de ambas tablas. 

LEFT JOIN

Quizás veas esto como LEFT OUTER JOIN, pero la mayoría de los usuarios prefieren LEFT JOIN. Ambas opciones son sintaxis correcta. LEFT JOIN devuelve todos los registros de la tabla izquierda y solo los registros coincidentes de la tabla derecha. Usa LEFT JOIN cuando necesites los datos de toda la primera tabla y los valores de la segunda tabla, si existen. 

RIGHT JOIN

Quizás te aparezca como RIGHT OUTER JOIN o RIGHT JOIN. RIGHT JOIN devuelve todos los registros de la tabla derecha y solo los registros correspondientes de la tabla izquierda. A nivel práctico, raras veces se usa RIGHT JOIN. La mayoría de las personas simplemente cambia las tablas y sigue usando LEFT JOIN. 

FULL OUTER JOIN

Quizás a veces te aparezca como FULL JOIN. FULL OUTER JOIN devuelve todos los registros de las tablas especificadas. Puedes combinar las tablas de esta manera, pero recuerda que como resultado puede ser potencialmente una gran extracción de datos. FULL OUTER JOIN devuelve todos los registros de ambas tablas aun si los datos no se rellenaron en una de las tablas.

Para obtener más información

Las JOIN son útiles para trabajar con bases de datos relacionales y SQL, y tendrás muchísimas oportunidades de practicarlas por tu cuenta. Estos son algunos otros recursos que pueden darte más información sobre las JOIN y cómo usarlas:

    JOIN de SQL

: Esta es una buena explicación básica de JOIN con ejemplos. Si necesitas un repaso rápido de qué hacen las diferentes JOIN, este es un gran recurso para marcar y volver a consultar más adelante.  

JOIN de bases de datos - Introducción a tipos y conceptos de JOIN

: Esta es una introducción muy completa a las JOIN. Este artículo no solo explica qué son las JOIN y cómo usarlas, sino que también explica en mayor detalle las diferentes situaciones en las que usarías y por qué usarías las diferentes JOIN. Este en un gran recurso si estás interesado en aprender más sobre la lógica detrás del uso de JOIN.

Tipos de JOIN en SQL explicados en elementos visuales

: Este recurso tiene una representación visual de las diferentes JOIN. Es una manera muy útil de comprender las JOIN si aprendes mejor con lo visual y puede ser una manera muy útil de recordar las diferentes JOIN. 

JOIN en SQL: Uniendo datos JOIN por JOIN

    : Este recurso no solo tiene una explicación detallada de las JOIN con ejemplos, sino que también brinda datos de ejemplo que puedes usar para seguir su guía paso a paso. Esta es una manera útil de practicar las JOIN con datos reales. 

    JOIN en SQL:

     Este es otro recurso que brinda una explicación clara de las JOIN y usa ejemplos para demostrar cómo funcionan. Los ejemplos también combinan JOIN con asignación de alias. Esta es una gran oportunidad para ver cómo se pueden combinar las JOIN con otros conceptos de SQL que has aprendido en este curso.  


<----------------------------------------------------------------------------------------------------------------------->

Video: Count y Count Distinct

hemos descubierto que las hojas de cálculo y SQL tienen muchas herramientas en común. Antes en este programa, aprendimos sobre COUNT en las hojas de cálculo. Ahora es momento de analizar herramientas similares en SQL: COUNT y COUNT DISTINCT. En este vídeo, hablaremos sobre cuándo usarías estas consultas y veremos un ejemplo. 

-> COUNT puede usarse para contar el número total de valores numéricos dentro de un rango específico en las hojas de cálculo. 
-> COUNT en SQL hace lo mismo. COUNT es una consulta que devuelve el número de filas en un rango especificado. 
Pero COUNT DISTINCT es un poco diferente. 

-> COUNT DISTINCT es una consulta que solo devuelve los valores distintos en ese rango. Básicamente, esto significa que COUNT DISTINCT no cuenta valores repetidos. 

Como analista de datos, usarás COUNT y COUNT DISTINCT cada vez que quieras responder preguntas sobre cantidad. Como, ¿cuántos clientes hicieron esto? O, ¿cuántas transacciones hubo este mes? O, ¿cuántas fechas hay en este conjunto de datos? Y los usarás a lo largo del proceso de análisis de datos en diferentes etapas. Por ejemplo, quizás los necesites cuando estés limpiando datos para verificar cuántas filas quedan en tu conjunto de datos. O podrías usar COUNT y COUNT DISTINCT durante el análisis en sí para responder una pregunta de cantidad. Te toparás mucho con este tipo de preguntas. Por eso es muy útil conocer COUNT y COUNT DISTINCT. Pero veamos un ejemplo para ver a COUNT y COUNT DISTINCT en acción. Para este ejemplo, estamos trabajando con una empresa que fabrica calcetines. Tenemos dos tablas: Depósito y Pedidos. Miremos rápidamente estas tablas antes de comenzar a hacer consultas. Primero, analicemos la tabla de Depósito. Puedes ver las columnas aquí: ID de depósito, alias de depósito, capacidad máxima, número total de empleados y estado en que está ubicado el depósito. Luego veamos las 100 filas superiores de la tabla de Pedidos. Aquí podemos usar LIMIT para limitar el número de filas devueltas. Esto es útil si trabajas con grandes conjuntos de datos, especialmente si solo quieres explorar una pequeña muestra de ese conjunto de datos. A partir de esta consulta, vamos a comenzar con una instrucción FROM para poder asignar alias a nuestras tablas. 

La asignación de alias es cuando nombras temporalmente una tabla o columna en tu consulta para que sea más fácil de leer y escribir. 

Dado que estos nombres son temporarios, solo se mantienen por la consulta dada. Podemos usar nuestra instrucción FROM para escribir cuáles serán nuestros alias para las tablas para ahorrarnos tiempo en otras partes de la consulta. Comenzaremos con FROM y usaremos alias para nombrar simplemente como "pedidos" a los pedidos de depósito. Digamos que necesitamos tanto los detalles del depósito como los detalles del pedido porque queremos informar sobre la distribución de pedidos por estado. Juntaremos con JOIN estas dos tablas porque queremos datos de ambas y asignaremos un alias a nuestra tabla de depósito en el proceso. En este caso, usamos JOIN como abreviatura de INNER JOIN porque queremos datos correspondientes de ambas tablas. Y ahora que asignamos alias, desarrollemos la instrucción SELECT que viene antes de FROM. Ejecutemos eso. Y listo. Ahora ya juntamos los datos de ambas tablas, y sabemos cómo crear estos alias tan útiles. Ahora queremos contar cuántos estados hay en nuestros datos ordenados. Para hacerlo, usaremos COUNT y COUNT DISTINCT ahora. Podemos probar primero una consulta simple de COUNT. Juntaremos con JOIN las tablas de Pedidos y Depósito en nuestra instrucción FROM. Y en este caso, empezaremos seleccionando con SELECT y contando con COUNT el número de estados. Ejecutemos esta consulta y veamos qué sale. Esperen, algo falló. Esta consulta devolvió más de 9,000 estados porque contamos cada fila que incluía un estado. Pero lo que queremos en realidad es contar los estados distintos. Volvamos a probar con COUNT DISTINCT. Esta consulta será similar a la última, pero usaremos DISTINCT para eliminar los casos repetidos que obtuvimos la última vez. Usaremos la consulta que acabamos de armar, pero reemplazaremos COUNT por COUNT DISTINCT en nuestra instrucción SELECT. Probemos esta consulta. Ahora sí. Según estos resultados, tenemos tres estados distintos en nuestros datos de Pedidos. Veamos qué pasa cuando agrupamos según la columna de estados en nuestra tabla de depósito, que llamaremos depósito punto estado. Usaremos JOIN y GROUP BY en nuestra instrucción FROM. Empecemos nuevamente por ahí. Luego GROUP BY estado del depósito. Ahora desarrollemos nuestra instrucción SELECT a partir de eso. Usaremos COUNT DISTINCT. Ejecutemos eso. Ahora tenemos tres filas, una por cada estado representado en los datos de Pedidos. Y nuestro COUNT DISTINCT en el número de pedidos resume el recuento que ejecutamos antes: 9,999. Verás que usas COUNT y COUNT DISTINCT en cada etapa del proceso de análisis de datos.
___________________________
¿Cuál es la diferencia entre COUNT y COUNT DISTINCT en una consulta a una base de datos?

COUNT devuelve el número de filas en un rango especificado. COUNT DISTINCT solo devuelve los valores distintos en un rango especificado. 

<----------------------------------------------------------------------------------------------------------------------->

Video: Consultas dentro de las consultas

las subconsultas. 

Una subconsulta es una consulta SQL que está anidada dentro de una consulta más grande. 

¿Alguna vez viste una de esas muñecas que van una adentro de otra? También se las conoce como muñecas rusas mamushkas o matrioshkas. Las subconsultas se parecen mucho a estas muñecas rusas. No, en serio. Tu consulta más grande puede tener una subconsulta en su interior y luego esa subconsulta podría tener una subconsulta, y después esa subconsulta podría tener otra subconsulta. Pero después cuando las apilas todas juntas forman una consulta. Con las subconsultas puedes combinar distintas piezas de lógica entre sí. Dado que la lógica de tu consulta externa depende de la consulta interna, puedes hacer más cosas con una sola consulta. Esto significa que toda la lógica está en un solo lugar, lo que hace que sea más eficiente y fácil de leer. La instrucción que contiene la subconsulta también puede llamarse consulta externa o selección externa. Esto convierte a la subconsulta en la consulta interna o selección interna. La consulta interna se ejecuta primero para que los resultados puedan pasarse a la consulta externa para que los use. Las subconsultas pueden ser un poco confusas porque hay muchas capas. Pero si tienes en cuenta que la consulta más interna se ejecuta primero, será más fácil ordenar tus subconsultas cuando quieres ejecutarlas. Las subconsultas también pueden anidarse dentro de todo tipo de otras consultas. Generalmente encontrarás subconsultas anidadas en cláusulas FROM o WHERE. Probemos algunas subconsultas comunes. Empecemos con una subconsulta en una instrucción SELECT usando los datos de bicicletas compartidas de un ejemplo anterior. Para la primera instrucción, digamos que queremos comparar el número de bicicletas disponibles en una estación con el número promedio de bicicletas disponibles. Usaremos esta consulta para obtener el número promedio de bicicletas disponibles. Después vamos a incorporarlo como subconsulta. Ahora desarrollemos nuestra consulta externa de SELECT. Queremos seleccionar la ID de la estación y el número de bicicletas disponibles. Luego pondremos la consulta SELECT que extrae el número promedio de bicicletas dentro de esa consulta externa usando paréntesis. También incorporaremos FROM a la subconsulta antes de cerrarla con otro paréntesis y completar la consulta externa. El final de la consulta OUTER JOIN tiene AS para mostrar qué nombre le queremos poner a esta columna y una última instrucción FROM para indicar a qué tabla nos referimos. Ahora ejecutemos eso. ¡Listo! Tenemos una tabla con el número de bicicletas disponibles y el número promedio de bicicletas disponibles en diferentes estaciones. Es muy común ver subconsultas anidadas en instrucciones FROM y WHERE. Así que probemos ahora esas. Podríamos usar una instrucción FROM para calcular el número de viajes que comenzaron en cada estación en un período. Empezaremos con nuestra consulta externa y escribiremos SELECT station_id, name y number_of_rides. Usaremos AS para indicarle qué etiqueta queremos para la tabla, y FROM para indicarle de dónde sacamos los datos. Pero antes de terminar esa consulta, agregaremos una subconsulta. Pondremos nuestros paréntesis aquí y luego SELECT start_station_id. Después podemos decirle que COUNT number_of_rides FROM los datos del viaje y lo agrupe por start_station_id. Después de eso, cerraremos la subconsulta con un paréntesis para poder seguir desarrollando la consulta externa. Volveremos a usar AS y después usaremos INNER JOIN y ON para juntarlos con los datos de la ID de la estación. Por último, le indicaremos que los coloque en orden descendente. Veamos qué pasa cuando ejecutamos eso. Ahora tenemos el número de viajes iniciados en cada estación. Un último ejemplo. Usemos una instrucción WHERE. La empresa de bicicletas compartidas tiene dos tipos de usuarios: suscriptores y clientes ocasionales. Supongamos que queremos una lista de las estaciones que usaron los suscriptores. Como siempre, empezamos con la consulta externa. SELECT station_ id y el nombre FROM el conjunto de datos público que estamos usando. Esta vez, usaremos una instrucción WHERE. Además, usaremos IN para poder especificar múltiples valores y esta instrucción WHERE. Después pondremos nuestra subconsulta entre paréntesis. Volveremos a agregar SELECT, FROM y WHERE. Pero esta vez diremos que solo queremos datos sobre clientes específicos. Es bueno observar que puedes usar operadores de comparación en las subconsultas, incluso operadores de filas múltiples como IN, ANY o ALL. En este caso, usaremos el signo igual para indicar que solo queremos los datos de los usuarios suscriptores. Ahora ejecutamos la consulta y tenemos la ID y el nombre de las estaciones que cumplen con nuestros criterios. Así son las subconsultas en acción. Las subconsultas pueden ser complicadas. Hay muchas capas para analizar y es posible que te surjan errores cuando practiques. No tiene nada de malo. Atravesar ese desafío significa que estás creciendo. Si todo fuera fácil, no encontraríamos nuevas maneras de crecer. Para mí, se trata de cuánto trabajo y cuánto tiempo necesito invertir para hacerlo. Date tiempo para practicar este nuevo concepto. Próximamente tendrás la oportunidad de usar las subconsultas para agregar datos o poder avanzar al desafío semanal. Tomarás todo lo que aprendiste, usando VLOOKUP, diferentes JOINS y subconsultas, y lo aplicarás a esta próxima evaluación. Hicimos muchos trabajos complejos. Si quieres tomarte un momento para repasar estos vídeos antes de avanzar, siéntete libre de hacerlo.
________________________________
En SQL, ¿qué es una subconsulta?
En SQL, una subconsulta es una consulta anidada dentro de otra consulta.

<----------------------------------------------------------------------------------------------------------------------->

Video: Uso de subconsultas para agregar datos

Tenemos algo de experiencia anidando subconsultas en nuestras instrucciones SQL para realizar consultas más complicadas. Ahora es momento de hablar sobre cómo agregar datos con subconsultas. A continuación, aprenderemos acerca de algunas nuevas instrucciones de subconsultas y las usaremos para agregar datos. La consulta que construiremos en este vídeo es bastante avanzada. Va a ser un poco complicada, pero sé que puedes hacerlo. ¡Empecemos! Ya usamos funciones como WHERE para filtrar nuestros datos, pero la función WHERE no puede usarse con funciones de agregado. Por ejemplo, puedes usar WHERE en una instrucción y luego acompañarla de GROUP BY. Pero cuando quieres usar GROUP BY primero y después usar WHERE sobre esos resultados, necesitarás una función diferente. En este punto, aparece HAVING. 

HAVING básicamente te permite agregar un filtro a tu consulta en vez de a la tabla subyacente cuando trabajas con funciones de agregado. 

De esa manera, solo devuelve registros que cumplen tus condiciones específicas. Asimismo.... 

CASE devuelve registros dentro de tus condiciones permitiéndote incluir instrucciones IF/THEN en tu consulta. 

Intentemos agregar nuestros datos con subconsultas y probar estas nuevas funciones. Digamos que trabajamos con una compañía que fabrica calcetines como comentamos antes. Se nos pidió que calculáramos qué porcentaje de los pedidos son completados por cada depósito. Básicamente, nos interesa saber qué depósitos entregan más pedidos. Ya hemos visto estas tablas, pero para repasar rápidamente, esta es nuestra tabla de Pedidos. Puedes ver las columnas aquí: id_pedido, id_cliente, id_depósito, fecha_pedido y fecha_envío. Si mostramos la tabla de depósito, podemos ver sus columnas. Tenemos id_depósito, alias_depósito, capacidad_máxima, el número total de empleados y el estado en que está ubicado el depósito. Antes de comenzar a armar el resto de nuestra consulta, deberíamos asignarles un alias a nuestros nombres de tabla. Como repaso, 

la asignación de alias es cuando nombras temporalmente una tabla o columna en tu consulta para que sea más fácil de leer y escribir. 

 Esta consulta de ejemplo es un poco más complicada que las que vimos antes. La asignación de alias nos ayudará a ahorrar tiempo. Comenzaremos por asignarle un alias a la tabla de Depósito en nuestra instrucción FROM. La instrucción FROM en esta consulta está cerca del final, pero armaremos esto primero para que podamos usar el alias en el resto. Lo simplificaremos a Depósito para el resto de esta consulta. Sabemos que juntaremos estas tablas con JOIN. Agreguemos eso ya que estamos mientras trabajamos en esta parte de la consulta. Aquí usamos una LEFT JOIN porque queremos toda la información de nuestros datos de Depósito, aun si no aparece en la tabla de Pedidos. Luego asignaremos un alias a la tabla de Pedidos como parte de esta instrucción. Ahora nuestras dos tablas tienen nombres temporales que podemos usar. Ya terminamos una instrucción JOIN. Pero antes de que podamos desarrollar el principio de esta consulta, avancemos y agreguemos nuestra instrucción GROUP BY después de esta JOIN. Los agruparemos por id_depósito y nombre. Ahora volveremos al principio de la consulta. Seleccionaremos la id_depósito. Usaremos CONCAT para combinar las cadenas con el estado del depósito y alias AS (como) el nombre del depósito. Luego usaremos COUNT para obtener el número de pedidos por depósito. Luego incorporaremos una subconsulta para sacar el número total de pedidos hechos en todos los depósitos. Escribiremos SELECT nuevamente y luego escribiremos la subconsulta entre paréntesis. Colocaremos un asterisco después de COUNT para indicar que queremos incluir todo de la tabla de Pedidos. Por último, cerraremos la subconsulta y usaremos AS para nombrar pedidos_totales a esta columna. Ahora que completamos la lógica de nuestra subconsulta, podemos usar una instrucción CASE para crear categorías para nuestros depósitos según cuántos pedidos completarán. Los representaremos como porcentajes. Observa que aparece COUNT en la instrucción varias veces. Comenzaremos diciendo que WHEN (cuando) el número de pedidos FROM (de) nuestra tabla de Pedidos sea inferior o igual a 0.2, THEN (entonces) la tabla dirá "Completó 0-20% de los pedidos". Luego usaremos WHEN de nuevo para indicar que cuando el número de pedidos sea superior a 0.2 e inferior o igual a 0.6, dirá, "completó 21-60% de los Pedidos". Después de eso, podemos usar ELSE para que todo lo que no cumpla con los criterios de nuestra instrucción CASE diga, "Completó más del 60% de los Pedidos". Luego usaremos END AS para nombrar esta columna resumen_de_cumplimiento. Eso nos trae de vuelta a la parte de la consulta que ya escribimos. Pero vamos a agregar una instrucción HAVING al final de esta consulta. Nuestra tabla de Depósito tiene depósitos que actualmente están en construcción, y queremos excluirlos porque aún no completan pedidos. Podemos usar HAVING para solo incluir depósitos que tengan al menos un pedido. Ahora, antes de ejecutar esta consulta, tomemos un momento para observar todo. Tenemos una SELECT externa, una subconsulta COUNT, una instrucción CASE, una JOIN y una HAVING, todo incluido en una consulta. Armamos una consulta realmente compleja. Así que ejecutemos la consulta para ver la nueva tabla. Ahí está. Ahora podemos identificar con facilidad qué porcentaje de los pedidos totales de nuestra empresa son completados por cada depósito. Estos depósitos cumplen con nuestros criterios. Y podemos ver aquí en la columna resumen_de_cumplimiento las categorías de porcentajes que indicamos en nuestra instrucción CASE. Evidentemente, como incluimos una instrucción HAVING para especificar solo depósitos con al menos un pedido, no hay ningún depósito que actualmente esté en construcción en esta tabla. Esa consulta tan complicada que escribimos creó esta tabla específica de datos que podemos usar para comparar fácilmente el desempeño que están teniendo estos depósitos. Ahí lo tienes. Esa es una pequeña muestra de cómo es trabajar con subconsultas y agregación de datos. 

Cláusulas como HAVING y CASE emparejadas con subconsultas te ayudarán a crear consultas cada vez más complejas, lo que te permite hacer cosas cada vez más complejas en SQL.

<----------------------------------------------------------------------------------------------------------------------->

Funciones y subconsultas SQL: Una amistad funcional

En esta lectura, aprenderás sobre funciones SQL y cómo a veces se usan con subconsultas. Las funciones SQL son herramientas integradas a SQL para posibilitar la realización de cálculos. Una subconsulta (también llamada consulta interna o anidada) es una consulta dentro de otra consulta. 
¿Cómo funcionan las funciones SQL?

Las funciones SQL son lo que posibilita la agregación de datos. (Como recordatorio, la agregación de datos es el proceso de recolectar datos de múltiples fuentes para combinarlos en una sola colección resumida). Entonces, ¿cómo funcionan las funciones SQL? Volviendo a W3Schools, repasemos algunas de estas funciones para comprender mejor cómo ejecutar estas consultas:

    SQL HAVING

: Esta es una descripción general de la cláusula HAVING, incluyendo qué es y un tutorial de cómo y cuándo funciona.

SQL CASE

: Explora el uso de la instrucción CASE y ejemplos de cómo funciona.

SQL IF

: Este es un tutorial de la función IF y ofrece ejemplos que puedes usar para practicar.

SQL COUNT

    : La función COUNT es igual de importante que el resto, y este tutorial ofrece múltiples ejemplos para repasar.

Subconsultas: la guinda del pastel

Piensa en una consulta como un pastel. Un pastel puede tener múltiples capas en su interior e incluso capas dentro de esas capas. Cada una de estas capas son nuestras subconsultas y cuando juntas todas las capas, obtienes un pastel (consulta). Habitualmente las subconsultas están anidadas en las cláusulas SELECT, FROM o WHERE. 

Verás que dentro de la primera cláusula SELECT existe otra cláusula SELECT. La segunda cláusula SELECT marca el inicio de la subconsulta en esta instrucción. Existen muchas maneras diferentes de utilizar las subconsultas, y los recursos indicados te ofrecerán orientación adicional a medida que aprendes. Pero, primero, repasemos las reglas de las subconsultas. 

Existen algunas reglas que deben seguir las subconsultas:

    Las subconsultas tienen que estar dentro de paréntesis

    Una subconsulta puede tener una sola columna especificada en la cláusula SELECT. Si quieres que una subconsulta compare varias columnas, esas columnas deben haberse seleccionado en la consulta principal.

    Las subconsultas que devuelven más de una fila solo pueden usarse con múltiples operadores de valor, tales como el operador IN que permite especificar múltiples valores en una cláusula WHERE.

    Una subconsulta no puede estar anidada en un comando SET. El comando SET se usa con UPDATE para especificar qué columnas (y valores) se deben actualizar en una tabla.

Recursos adicionales

Los siguientes recursos ofrecen más orientación sobre subconsultas y su uso:

    Subconsultas SQL:

 Esta instrucción detallada incluye la definición de una subconsulta, su finalidad en SQL, cuándo y cómo usarla, y cuáles serán los resultados

Escritura de subconsultas en SQL

    : Explora los conceptos básicos de las subconsultas en este tutorial interactivo, incluyendo ejemplos y problemas de práctica que puedes resolver

A medida que sigues aprendiendo más sobre el uso de SQL, las funciones y las subconsultas, te darás cuenta de todo el tiempo que realmente puedes ahorrarte memorizando estos consejos y trucos.

<----------------------------------------------------------------------------------------------------------------------->

Video: A donde te lleva el analisis datos

Lo primero que les diría sobre mi camino hasta el análisis de datos es que no fue directo. Llegué a Google hace tres años y hago análisis computacional de datos y realmente disfruto ese rol. Está todo unido por el entusiasmo por los datos y por responder preguntas que tienen un impacto. Tu trayectoria profesional no siempre es directa. Quizás el análisis computacional de datos no sea mi destino final. Pero lo que diría es: sigue cambiando poco a poco, descubre qué te entusiasma de tu rol actual. En mi caso era que me encantaba evitar la política y la formación de coaliciones y simplemente quería aportar mejores hechos y mejores conocimientos para realmente motivar decisiones. Entonces descubre qué te gusta sobre tu rol actual, tu trabajo actual y luego descubre qué rol diferente podrías desempeñar para basarte en eso, pero quizás obtener más de lo que te gusta. Sé curioso. La principal destreza realmente es solo preguntar por qué y luego intentar responder esa pregunta. Te marcará el camino, ya sea Wikipedia para comprender este modelo... Generalmente hay alguien que dice: "¿Por qué usaron ese modelo?". Busca ese modelo y sigue ese hilo. O existen tantos recursos excelentes para diferentes lenguajes. Si quieres entender SQL, existen tantas herramientas excelentes. Pero creo que lo principal es simplemente seguir tu curiosidad. Cuando reviso currículums, lo primero que busco obviamente son esas destrezas centrales, la capacidad de analizar datos, demostrarlos, experiencia con algunas de las herramientas que usamos. Pero también busco pasión real por responder preguntas. Un ejemplo es cuando alguien realmente se plantó e intentó comprender el porqué y siguió preguntando: "¿Por qué pasa esto, por qué pasa esto?" y realmente se planta.

<----------------------------------------------------------------------------------------------------------------------->